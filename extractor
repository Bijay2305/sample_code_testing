import cv2
from pyzbar.pyzbar import decode

def decode_qr_code(image):
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Decode the QR codes
    qr_codes = decode(gray)

    results = []
    # Iterate over the detected QR codes
    for qr_code in qr_codes:
        # Extract the QR code data
        qr_code_data = qr_code.data.decode('utf-8')

        # Add the QR code data to the results
        results.append(qr_code_data)

    return results

# Load the image using OpenCV
image = cv2.imread('path/to/image.jpg')

# Decode QR codes from the image
qr_code_results = decode_qr_code(image)

# Print the decoded QR code data
for qr_code_data in qr_code_results:
    print("QR Code Data:", qr_code_data)
++++++++++++++++++++++++++++++++++++++==
import cv2
from pyzbar.pyzbar import decode

def read_qr_code(image_path):
    # Load the image using OpenCV
    image = cv2.imread(image_path)

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Decode the QR code
    qr_codes = decode(gray)

    # Extract and return the QR code data
    if qr_codes:
        qr_code_data = qr_codes[0].data.decode('utf-8')
        return qr_code_data

    return None

# Example usage
image_path = 'path/to/image.jpg'
qr_code_data = read_qr_code(image_path)

if qr_code_data:
    print("QR Code Data:", qr_code_data)
else:
    print("No QR code detected in the image.")
    
    __________________________________________________-
    
    
    import cv2
from PIL import Image

def rotate_image(image_path):
    # Open the image using PIL
    pil_image = Image.open(image_path)

    # Extract the Exif metadata
    exif_data = pil_image._getexif()

    # Check if the image has Exif data and contains orientation information
    if exif_data is not None and 274 in exif_data:
        orientation = exif_data[274]

        # Determine the rotation angle based on the orientation value
        if orientation == 3:
            angle = 180
        elif orientation == 6:
            angle = 270
        elif orientation == 8:
            angle = 90
        else:
            angle = 0

        # Rotate the image using OpenCV
        opencv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
        rotated_image = cv2.rotate(opencv_image, cv2.ROTATE_90_CLOCKWISE)

        # Convert the rotated image back to PIL format
        rotated_pil_image = Image.fromarray(cv2.cvtColor(rotated_image, cv2.COLOR_BGR2RGB))

        return rotated_pil_image

    return pil_image

# Example usage
image_path = 'path/to/image.jpg'
rotated_image = rotate_image(image_path)
rotated_image.show()
++++++++++++++++++++++++++
import cv2
import piexif
from PIL import Image

def get_image_orientation(image_path):
    # Load the image using PIL (Python Imaging Library)
    pil_image = Image.open(image_path)

    # Get the EXIF data of the image
    exif_dict = piexif.load(pil_image.info["exif"])

    # Find the orientation tag in the EXIF data
    orientation = exif_dict.get("0th", {}).get(piexif.ImageIFD.Orientation)

    # Return the orientation value
    return orientation

def bring_image_to_standard_orientation(image_path):
    # Load the image using OpenCV
    image = cv2.imread(image_path)

    # Get the image orientation
    orientation = get_image_orientation(image_path)

    # Rotate the image to bring it to a standard orientation
    if orientation == 3:
        image = cv2.rotate(image, cv2.ROTATE_180)
    elif orientation == 6:
        image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
    elif orientation == 8:
        image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)

    # Return the rotated image
    return image

# Example usage
image_path = 'path/to/image.jpg'
rotated_image = bring_image_to_standard_orientation(image_path)

# Display the rotated image
cv2.imshow('Rotated Image', rotated_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
+++++++++++++++++++++++++++++++++++++
import cv2
import piexif
from PIL import Image

def get_image_orientation(image_path):
    # Load the image using PIL (Python Imaging Library)
    pil_image = Image.open(image_path)

    # Get the EXIF data of the image
    exif_dict = piexif.load(pil_image.info["exif"])

    # Find the orientation tag in the EXIF data
    orientation = exif_dict.get("0th", {}).get(piexif.ImageIFD.Orientation)

    # Return the orientation value
    return orientation

def bring_image_to_standard_orientation(image_path):
    # Load the image using OpenCV
    image = cv2.imread(image_path)

    # Get the image orientation
    orientation = get_image_orientation(image_path)

    # Rotate the image to bring it to a standard orientation
    if orientation == 3:
        image = cv2.rotate(image, cv2.ROTATE_180)
    elif orientation == 6:
        image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
    elif orientation == 8:
        image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)

    # Return the rotated image
    return image

# Example usage
image_path = 'path/to/image.jpg'
rotated_image = bring_image_to_standard_orientation(image_path)

# Display the rotated image
cv2.imshow('Rotated Image', rotated_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import cv2
import piexif
from PIL import Image

def get_image_orientation(image_path):
    # Load the image using PIL (Python Imaging Library)
    pil_image = Image.open(image_path)

    # Get the EXIF data of the image
    exif_dict = piexif.load(pil_image.info["exif"])

    # Find the orientation tag in the EXIF data
    orientation = exif_dict.get("0th", {}).get(piexif.ImageIFD.Orientation)

    # Return the orientation value
    return orientation

def bring_image_to_standard_orientation(image_path):
    # Load the image using OpenCV
    image = cv2.imread(image_path)

    # Get the image orientation
    orientation = get_image_orientation(image_path)

    # Rotate the image to bring it to a standard orientation
    if orientation == 3:
        image = cv2.rotate(image, cv2.ROTATE_180)
    elif orientation == 6:
        image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
    elif orientation == 8:
        image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)

    # Return the rotated image
    return image

# Example usage
image_path = 'path/to/image.jpg'
rotated_image = bring_image_to_standard_orientation(image_path)

# Display the rotated image
cv2.imshow('Rotated Image', rotated_image)
cv2.waitKey(0)
cv2.destroyAllWindows()


