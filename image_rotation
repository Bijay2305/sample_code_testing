[20:58, 5/9/2023] Bijay Nayak: rom PIL import Image, ExifTags

try:
    image=Image.open(filepath)

    for orientation in ExifTags.TAGS.keys():
        if ExifTags.TAGS[orientation]=='Orientation':
            break
    
    exif = image._getexif()

    if exif[orientation] == 3:
        image=image.rotate(180, expand=True)
    elif exif[orientation] == 6:
        image=image.rotate(270, expand=True)
    elif exif[orientation] == 8:
        image=image.rotate(90, expand=True)

    image.save(filepath)
    image.close()
except (AttributeError, KeyError, IndexError):
    # cases: image don't have getexif
    pass
[20:58, 5/9/2023] Bijay Nayak: https://stackoverflow.com/questions/13872331/rotating-an-image-with-orientation-specified-in-exif-using-python-without-pil-in

[18:07, 5/10/2023] Bijay Nayak: 
from PIL import Image

def correct_image_orientation(image_path):
    """
    This function takes an image path as argument and returns the image with the correct orientation.
    
    Parameters:
    image_path (str): The path to the image file
    
    Returns:
    Image: The image with the correct orientation
    """
    try:
        # Open the image
        image = Image.open(image_path)
        
        # Check if the image has an orientation tag
        if hasattr(image, '_getexif'):
            exifdata = image._getexif()
            if exifdata is not None:
                orientation = exifdata.get(274)
                if orientation == 3:
                    image = image.rotate(180, expand=True)
                elif orientation == 6:
                    image = image.rotate(270, expand=True)
                elif orientation == 8:
                    image = image.rotate(90, expand=True)
        
        # Return the corrected image
        return image
    except Exception as e:
        # Log the error
        print(f"Error: {e}")
        return 0
[18:09, 5/10/2023] Bijay Nayak: import cv2

def correct_image_orientation(image_path):
    """
    This function takes an image file path as input, reads the image using OpenCV, and corrects its orientation.
    
    Parameters:
    image_path (str): The file path of the image to be corrected
    
    Returns:
    numpy.ndarray: The corrected image as a NumPy array
    """
    try:
        # Read the image using OpenCV
        image = cv2.imread(image_path)
        
        # Check if the image was successfully read
        if image is None:
            raise ValueError("Unable to read image file")
        
        # Get the image dimensions
        height, width = image.shape[:2]
        
        # Determine the orientation of the image
        if height > width:
            # Rotate the image 90 degrees clockwise
            image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
        elif width > height:
            # Rotate the image 90 degrees counterclockwise
            image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)
        
        # Return the corrected image
        return image
    except Exception as e:
        # Log the error
        print(f"Error: {e}")
        return None
[18:12, 5/10/2023] Bijay Nayak: https://www.udemy.com/course/chatgpt-build-solutions-and-apps-with-chatgpt-and-openai/learn/lecture/35995732?start=0#overview
