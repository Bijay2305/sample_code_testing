#Perspective correction or perspective rectification is the process of correcting the perspective distortion in an image

import cv2
import numpy as np

# Load the input image
img = cv2.imread("image.jpg")

# Define the coordinates of the four corners of the desired output image
pts1 = np.float32([[0,0],[800,0],[0,800],[800,800]])

# Find the coordinates of the four corners of the input image
pts2 = np.float32([[0,0],[img.shape[1],0],[0,img.shape[0]],[img.shape[1],img.shape[0]]])

# Compute the perspective transformation matrix
M = cv2.getPerspectiveTransform(pts2, pts1)

# Apply the perspective transformation to the input image
result = cv2.warpPerspective(img, M, (800, 800))

# Display the corrected image
cv2.imshow("Perspective Correction", result)
cv2.waitKey(0)
cv2.destroyAllWindows()
+++++
Determine the perspective transform matrix: You can use the "cv2.getPerspectiveTransform()" function to determine the perspective transform matrix by passing in a set of four source points and a set of four destination points that define the desired perspective.

Apply the perspective transform: Use the "cv2.warpPerspective()" function to apply the perspective transform to the image by passing in the perspective transform matrix and the original image.

Save the corrected image: Use the "cv2.imwrite()" function to save the corrected image to disk.

Here is an example code snippet to give you a better idea:

import cv2
import numpy as np

# Load the image
img = cv2.imread("image.jpg")

# Determine the perspective transform matrix
rows, cols, ch = img.shape
pts1 = np.float32([[0,0],[cols-1,0],[0,rows-1],[cols-1,rows-1]])
pts2 = np.float32([[0,0],[cols-1,0],[int(0.33*cols),rows-1],[int(0.66*cols),rows-1]])
M = cv2.getPerspectiveTransform(pts1,pts2)

# Apply the perspective transform
dst = cv2.warpPerspective(img,M,(cols,rows))

# Save the corrected image
cv2.imwrite("corrected_image.jpg", dst)
