import cv2

# Load the image
image = cv2.imread("image.jpg")

# Initialize the QR detector
detector = cv2.QRCodeDetector()

# Detect the QR code in the image
data, bbox, rectifiedImage = detector.detectAndDecode(image)

if len(data) > 0:
    # Draw a rectangle around the QR code
    for i in range(len(bbox)):
        cv2.line(image, tuple(bbox[i][0]), tuple(bbox[(i+1) % len(bbox)][0]), color=(255, 0, 0), thickness=2)

    # Display the image with the QR code drawn
    cv2.imshow("QR code", image)
    cv2.waitKey(0)
else:
    print("QR code not detected")


#https://github.com/cyberj0g/logo-detector
++++ detect text region from a image 
import cv2
import pytesseract

# Load the image
image = cv2.imread("image.png")

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply thresholding to the image to simplify the text regions
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

# Use pytesseract to detect the text regions
text_regions = pytesseract.image_to_data(thresh, output_type=pytesseract.Output.DICT)

# Print the text regions
for i in range(0, len(text_regions["text"])):
    x = text_regions["left"][i]
    y = text_regions["top"][i]
    w = text_regions["width"][i]
    h = text_regions["height"][i]
    text = text_regions["text"][i].strip()

    if len(text) > 0:
        print("Text:", text)
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)

# Show the image with the text regions outlined
cv2.imshow("Text regions", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
+++++
